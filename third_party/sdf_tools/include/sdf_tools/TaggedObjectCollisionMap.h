// Generated by gencpp from file sdf_tools/TaggedObjectCollisionMap.msg
// DO NOT EDIT!


#ifndef SDF_TOOLS_MESSAGE_TAGGEDOBJECTCOLLISIONMAP_H
#define SDF_TOOLS_MESSAGE_TAGGEDOBJECTCOLLISIONMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Vector3.h>

namespace sdf_tools
{
template <class ContainerAllocator>
struct TaggedObjectCollisionMap_
{
  typedef TaggedObjectCollisionMap_<ContainerAllocator> Type;

  TaggedObjectCollisionMap_()
    : header()
    , origin_transform()
    , dimensions()
    , cell_size(0.0)
    , number_of_components(0)
    , components_valid(false)
    , convex_segments_valid(false)
    , initialized(false)
    , OOB_value()
    , data()  {
    }
  TaggedObjectCollisionMap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , origin_transform(_alloc)
    , dimensions(_alloc)
    , cell_size(0.0)
    , number_of_components(0)
    , components_valid(false)
    , convex_segments_valid(false)
    , initialized(false)
    , OOB_value(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _origin_transform_type;
  _origin_transform_type origin_transform;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dimensions_type;
  _dimensions_type dimensions;

   typedef double _cell_size_type;
  _cell_size_type cell_size;

   typedef uint32_t _number_of_components_type;
  _number_of_components_type number_of_components;

   typedef uint8_t _components_valid_type;
  _components_valid_type components_valid;

   typedef uint8_t _convex_segments_valid_type;
  _convex_segments_valid_type convex_segments_valid;

   typedef uint8_t _initialized_type;
  _initialized_type initialized;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _OOB_value_type;
  _OOB_value_type OOB_value;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> const> ConstPtr;

}; // struct TaggedObjectCollisionMap_

typedef ::sdf_tools::TaggedObjectCollisionMap_<std::allocator<void> > TaggedObjectCollisionMap;

typedef boost::shared_ptr< ::sdf_tools::TaggedObjectCollisionMap > TaggedObjectCollisionMapPtr;
typedef boost::shared_ptr< ::sdf_tools::TaggedObjectCollisionMap const> TaggedObjectCollisionMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sdf_tools

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'sdf_tools': ['/home/zby/workspaces/temp_ws/src/sdf_tools/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "320371317f699b0048968a467deb0a13";
  }

  static const char* value(const ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x320371317f699b00ULL;
  static const uint64_t static_value2 = 0x48968a467deb0a13ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdf_tools/TaggedObjectCollisionMap";
  }

  static const char* value(const ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
geometry_msgs/Transform origin_transform\n\
geometry_msgs/Vector3 dimensions\n\
float64 cell_size\n\
uint32 number_of_components\n\
bool components_valid\n\
bool convex_segments_valid\n\
bool initialized\n\
uint8[] OOB_value\n\
uint8[] data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.origin_transform);
      stream.next(m.dimensions);
      stream.next(m.cell_size);
      stream.next(m.number_of_components);
      stream.next(m.components_valid);
      stream.next(m.convex_segments_valid);
      stream.next(m.initialized);
      stream.next(m.OOB_value);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaggedObjectCollisionMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdf_tools::TaggedObjectCollisionMap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "origin_transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.origin_transform);
    s << indent << "dimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dimensions);
    s << indent << "cell_size: ";
    Printer<double>::stream(s, indent + "  ", v.cell_size);
    s << indent << "number_of_components: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number_of_components);
    s << indent << "components_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.components_valid);
    s << indent << "convex_segments_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.convex_segments_valid);
    s << indent << "initialized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.initialized);
    s << indent << "OOB_value[]" << std::endl;
    for (size_t i = 0; i < v.OOB_value.size(); ++i)
    {
      s << indent << "  OOB_value[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.OOB_value[i]);
    }
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDF_TOOLS_MESSAGE_TAGGEDOBJECTCOLLISIONMAP_H
